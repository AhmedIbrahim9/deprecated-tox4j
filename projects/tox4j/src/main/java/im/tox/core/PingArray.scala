package im.tox.core

import com.github.nscala_time.time.Imports._
import im.tox.core.PingArray.{Entry, EntryId, ErrorCode}
import im.tox.core.random.RandomCore

import scala.reflect.ClassTag
import scalaz.{-\/, \/, \/-}

/**
 * Ping array is an array used in toxcore to store data for pings. It enables
 * the storage of arbitrary data that can then be retrieved later by passing the
 * 8 byte ping id that was returned when the data was stored.
 *
 * Ping array is used in many places in toxcore to efficiently keep track of
 * sent packets.
 */

object PingArray {
  final case class EntryId(value: Long) extends AnyVal

  private final case class Entry[T](
    id: EntryId,
    time: DateTime,
    data: T
  )

  sealed trait ErrorCode

  object ErrorCode {
    case object NoData extends ErrorCode
    case object InvalidEntry extends ErrorCode
    case object Timeout extends ErrorCode
  }
}

/**
 * It also frees data from pings that are older than a ping expiring delay set
 * when initializing the array.
 *
 * Ping arrays are initialized with a size and a timeout parameter. The size
 * parameter denotes the maximum number of entries in the array and the timeout
 * denotes the number of seconds to keep an entry in the array.
 */
final class PingArray[T](size: Int, expiryDelay: Period)(implicit classTag: ClassTag[T]) {

  /**
   * Timeout and size must be greater than 0.
   */
  require(size > 0)
  require((0 until expiryDelay.size()).map(expiryDelay.getValue).sum > 0)

  private val array = {
    val result = Array.ofDim[Option[Entry[T]]](size)
    Array.fill(size)(None)
    result
  }
  private var nextIndex = 0 // scalastyle:ignore var.field

  /**
   * Adding an entry to the ping array will make it return an 8 byte number that
   * can be used as the ping number of a ping packet.
   */
  def add(data: T): EntryId = {
    /**
     * Data is added to the array in a cyclical manner (0, 1, 2, 3... (array
     * size - 1), 0, 1, ...). If the array is full, the oldest element is
     * overwritten.
     */
    val index = this.nextIndex
    this.nextIndex =
      if (this.nextIndex == array.length - 1) {
        0
      } else {
        this.nextIndex + 1
      }

    /**
     * This number is generated by first generating a random 8 byte number,
     * dividing then multiplying it by the total size of the array and then
     * adding the index of the element that was added.
     *
     * This generates a random looking number that will return the index of the
     * element that was added to the array.
     */
    val entryId = EntryId(RandomCore.randomLong() / size * size + index)

    /**
     * This number is also stored along with the added data and the current time
     * (to check for timeouts).
     */
    val entry = Entry(
      entryId,
      DateTime.now(),
      data
    )

    array(index) = Some(entry)

    entryId
  }

  /**
   * To get data from the ping array, the ping number is passed to the function
   * to get the data from the array.
   */
  def remove(entryId: EntryId): \/[ErrorCode, T] = {
    /**
     * The modulo of the ping number with the total
     * size of the array will return the index at which the data is.
     */
    val index = (entryId.value % size).toInt

    array(index) match {
      /**
       * If there is no
       * data stored at this index, the function returns an error.
       */
      case None =>
        -\/(ErrorCode.NoData)
      case Some(Entry(id, time, data)) =>
        /**
         * If the array element has timed out, the
         * function returns an error.
         */
        if (time + expiryDelay < DateTime.now()) {
          -\/(ErrorCode.Timeout)
        } else if (id != entryId) {
          /**
           * The ping number is
           * then checked against the ping number stored for this element, if it is not
           * equal the function returns an error.
           */
          -\/(ErrorCode.InvalidEntry)
        } else {
          /**
           * If all the checks succeed the function returns the
           * exact data that was stored and it is removed from the array.
           */
          array(index) = None
          \/-(data)
        }
    }
  }

}
