#!/usr/bin/env perl

use strict;
use warnings FATAL => 'all';
use utf8;

use JSON::PP;

my $data = do { local $/; open my $fh, '<', 'exceptions.json' or die $!; decode_json <$fh> };

my $package = $data->[0];
my $prefix = $data->[1];
my $exns = $data->[2];

for my $type (keys %$exns) {
   for (keys $exns->{$type}) {
      my @lines = @{ $exns->{$type}{$_} };
      s/^/   * / for @lines;
      $exns->{$type}{$_} = join "\n", @lines;
   }
}

for my $type (keys %$exns) {
   open my $fh, '>', "Tox${prefix}${type}Exception.scala"
      or die $!;

   my $codes =
      join "\n",
      map { "  /**\n$exns->{$type}{$_}\n   */\n  case object $_ extends Code" }
      (sort keys $exns->{$type});

   print $fh <<SCALA;
package im.tox.tox4j.$package.exceptions

import im.tox.tox4j.exceptions.ToxException

object Tox${prefix}${type}Exception {

  sealed trait Code extends ToxException.Code
$codes

}

final case class Tox${prefix}${type}Exception(code: Tox${prefix}${type}Exception.Code, message: String = "")
  extends ToxException[Tox${prefix}${type}Exception.Code](message)
SCALA

}
